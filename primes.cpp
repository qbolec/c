/*   @JUDGE_ID:   14143RZ   10168   C++   "BIG , 2or3 , Arr, Arr"   */

#include <iostream.h>
long quad[447]={4,
9,
25,
49,
121,
169,
289,
361,
529,
841,
961,
1369,
1681,
1849,
2209,
2809,
3481,
3721,
4489,
5041,
5329,
6241,
6889,
7921,
9409,
10201,
10609,
11449,
11881,
12769,
16129,
17161,
18769,
19321,
22201,
22801,
24649,
26569,
27889,
29929,
32041,
32761,
36481,
37249,
38809,
39601,
44521,
49729,
51529,
52441,
54289,
57121,
58081,
63001,
66049,
69169,
72361,
73441,
76729,
78961,
80089,
85849,
94249,
96721,
97969,
100489,
109561,
113569,
120409,
121801,
124609,
128881,
134689,
139129,
143641,
146689,
151321,
157609,
160801,
167281,
175561,
177241,
185761,
187489,
192721,
196249,
201601,
208849,
212521,
214369,
218089,
229441,
237169,
241081,
249001,
253009,
259081,
271441,
273529,
292681,
299209,
310249,
316969,
323761,
326041,
332929,
344569,
351649,
358801,
361201,
368449,
375769,
380689,
383161,
398161,
410881,
413449,
418609,
426409,
434281,
436921,
452929,
458329,
466489,
477481,
491401,
502681,
516961,
528529,
537289,
546121,
552049,
564001,
573049,
579121,
591361,
597529,
619369,
635209,
654481,
657721,
674041,
677329,
683929,
687241,
703921,
727609,
734449,
737881,
744769,
769129,
776161,
779689,
786769,
822649,
829921,
844561,
863041,
877969,
885481,
896809,
908209,
935089,
942841,
954529,
966289,
982081,
994009,
1018081,
1026169,
1038361,
1042441,
1062961,
1067089,
1079521,
1100401,
1104601,
1125721,
1129969,
1142761,
1181569,
1190281,
1194649,
1203409,
1216609,
1229881,
1247689,
1261129,
1274641,
1324801,
1329409,
1352569,
1371241,
1394761,
1408969,
1423249,
1442401,
1471369,
1481089,
1495729,
1510441,
1515361,
1530169,
1560001,
1585081,
1630729,
1635841,
1646089,
1661521,
1666681,
1682209,
1692601,
1697809,
1708249,
1739761,
1745041,
1760929,
1852321,
1868689,
1885129,
1907161,
1957201,
1985281,
2024929,
2036329,
2042041,
2053489,
2070721,
2093809,
2105401,
2111209,
2128681,
2163841,
2193361,
2199289,
2211169,
2217121,
2229049,
2247001,
2283121,
2319529,
2343961,
2380849,
2399401,
2411809,
2430481,
2455489,
2468041,
2493241,
2505889,
2550409,
2563201,
2582449,
2588881,
2601769,
2621161,
2627641,
2647129,
2679769,
2745649,
2765569,
2778889,
2785561,
2866249,
2879809,
2886601,
2920681,
2961841,
2968729,
3003289,
3031081,
3052009,
3073009,
3094081,
3157729,
3179089,
3193369,
3200521,
3243601,
3279721,
3323329,
3352561,
3411409,
3463321,
3485689,
3500641,
3508129,
3523129,
3530641,
3568321,
3613801,
3636649,
3659569,
3728761,
3736489,
3798601,
3806401,
3892729,
3916441,
3948169,
3972049,
3988009,
3996001,
4012009,
4044121,
4068289,
4108729,
4116841,
4157521,
4214809,
4255969,
4280761,
4330561,
4338889,
4355569,
4363921,
4405801,
4456321,
4464769,
4532641,
4541161,
4566769,
4583881,
4592449,
4635409,
4669921,
4748041,
4853209,
4870849,
4897369,
4932841,
5004169,
5013121,
5031049,
5067001,
5139289,
5148361,
5166529,
5202961,
5230369,
5257849,
5276209,
5331481,
5340721,
5442889,
5470921,
5480281,
5508409,
5527201,
5555449,
5621641,
5650129,
5669161,
5678689,
5707321,
5726449,
5755201,
5812921,
5841889,
5870929,
5938969,
5958481,
5987809,
6046681,
6086089,
6115729,
6135529,
6265009,
6355441,
6405961,
6446521,
6466849,
6497401,
6507601,
6538249,
6651241,
6713281,
6723649,
6806881,
6848689,
6869641,
6932689,
7006609,
7059649,
7070281,
7091569,
7134241,
7166329,
7198489,
7219969,
7230721,
7252249,
7284601,
7327849,
7349521,
7360369,
7392961,
7447441,
7458361,
7513081,
7557001,
7579009,
7656289,
7711729,
7778521,
7789681,
7823209,
7845601,
7856809,
7946761,
8025889,
8048569,
8082649,
8128201,
8162449,
8185321,
8288641,
8334769,
8392609,
8427409,
8462281,
8508889,
8567329,
8637721,
8720209,
8743849,
8779369,
8814961,
8826841,
8994001,
9006001,
9066121,
9114361,
9138529,
9223369,
9247681,
9296401,
9369721,
9406489,
9480241,
9504889,
9541921,
9665881,
9728161,
9740641,
9840769,
10004569};
long small[447]={
2,
3,
5,
7,
11,
13,
17,
19,
23,
29,
31,
37,
41,
43,
47,
53,
59,
61,
67,
71,
73,
79,
83,
89,
97,
101,
103,
107,
109,
113,
127,
131,
137,
139,
149,
151,
157,
163,
167,
173,
179,
181,
191,
193,
197,
199,
211,
223,
227,
229,
233,
239,
241,
251,
257,
263,
269,
271,
277,
281,
283,
293,
307,
311,
313,
317,
331,
337,
347,
349,
353,
359,
367,
373,
379,
383,
389,
397,
401,
409,
419,
421,
431,
433,
439,
443,
449,
457,
461,
463,
467,
479,
487,
491,
499,
503,
509,
521,
523,
541,
547,
557,
563,
569,
571,
577,
587,
593,
599,
601,
607,
613,
617,
619,
631,
641,
643,
647,
653,
659,
661,
673,
677,
683,
691,
701,
709,
719,
727,
733,
739,
743,
751,
757,
761,
769,
773,
787,
797,
809,
811,
821,
823,
827,
829,
839,
853,
857,
859,
863,
877,
881,
883,
887,
907,
911,
919,
929,
937,
941,
947,
953,
967,
971,
977,
983,
991,
997,
1009,
1013,
1019,
1021,
1031,
1033,
1039,
1049,
1051,
1061,
1063,
1069,
1087,
1091,
1093,
1097,
1103,
1109,
1117,
1123,
1129,
1151,
1153,
1163,
1171,
1181,
1187,
1193,
1201,
1213,
1217,
1223,
1229,
1231,
1237,
1249,
1259,
1277,
1279,
1283,
1289,
1291,
1297,
1301,
1303,
1307,
1319,
1321,
1327,
1361,
1367,
1373,
1381,
1399,
1409,
1423,
1427,
1429,
1433,
1439,
1447,
1451,
1453,
1459,
1471,
1481,
1483,
1487,
1489,
1493,
1499,
1511,
1523,
1531,
1543,
1549,
1553,
1559,
1567,
1571,
1579,
1583,
1597,
1601,
1607,
1609,
1613,
1619,
1621,
1627,
1637,
1657,
1663,
1667,
1669,
1693,
1697,
1699,
1709,
1721,
1723,
1733,
1741,
1747,
1753,
1759,
1777,
1783,
1787,
1789,
1801,
1811,
1823,
1831,
1847,
1861,
1867,
1871,
1873,
1877,
1879,
1889,
1901,
1907,
1913,
1931,
1933,
1949,
1951,
1973,
1979,
1987,
1993,
1997,
1999,
2003,
2011,
2017,
2027,
2029,
2039,
2053,
2063,
2069,
2081,
2083,
2087,
2089,
2099,
2111,
2113,
2129,
2131,
2137,
2141,
2143,
2153,
2161,
2179,
2203,
2207,
2213,
2221,
2237,
2239,
2243,
2251,
2267,
2269,
2273,
2281,
2287,
2293,
2297,
2309,
2311,
2333,
2339,
2341,
2347,
2351,
2357,
2371,
2377,
2381,
2383,
2389,
2393,
2399,
2411,
2417,
2423,
2437,
2441,
2447,
2459,
2467,
2473,
2477,
2503,
2521,
2531,
2539,
2543,
2549,
2551,
2557,
2579,
2591,
2593,
2609,
2617,
2621,
2633,
2647,
2657,
2659,
2663,
2671,
2677,
2683,
2687,
2689,
2693,
2699,
2707,
2711,
2713,
2719,
2729,
2731,
2741,
2749,
2753,
2767,
2777,
2789,
2791,
2797,
2801,
2803,
2819,
2833,
2837,
2843,
2851,
2857,
2861,
2879,
2887,
2897,
2903,
2909,
2917,
2927,
2939,
2953,
2957,
2963,
2969,
2971,
2999,
3001,
3011,
3019,
3023,
3037,
3041,
3049,
3061,
3067,
3079,
3083,
3089,
3109,
3119,
3121,
3137,
3163};
char * CDTAB[100]=
{
" 0 0",
" 0 0",
" 2 2",
" 3 3",
" 3 5",
" 3 7",
" 5 7",
" 3 11",
" 3 13",
" 5 13",
" 3 17",
" 3 19",
" 5 19",
" 3 23",
" 5 23",
" 7 23",
" 3 29",
" 3 31",
" 5 31",
" 7 31",
" 3 37",
" 5 37",
" 3 41",
" 3 43",
" 5 43",
" 3 47",
" 5 47",
" 7 47",
" 3 53",
" 5 53",
" 7 53",
" 3 59",
" 3 61",
" 5 61",
" 7 61",
" 3 67",
" 5 67",
" 3 71",
" 3 73",
" 5 73",
" 7 73",
" 3 79",
" 5 79",
" 3 83",
" 5 83",
" 7 83",
" 3 89",
" 5 89",
" 7 89",
" 19 79",
" 3 97",
" 5 97",
" 3 101",
" 3 103",
" 5 103",
" 3 107",
" 3 109",
" 5 109",
" 3 113",
" 5 113",
" 7 113",
" 13 109"
" 11 113"
" 13 113"
" 19 109"
" 3 127",
" 5 127",
" 3 131",
" 5 131",
" 7 131",
" 3 137",
" 3 139",
" 5 139",
" 7 139",
" 11 137"
" 11 139"
" 3 149",
" 3 151",
" 5 151",
" 7 151",
" 3 157",
" 5 157",
" 7 157",
" 3 163",
" 5 163",
" 3 167",
" 5 167",
" 7 167",
" 3 173",
" 5 173",
" 7 173",
" 3 179",
" 3 181",
" 5 181",
" 7 181",
" 11 179"
" 11 181"
" 3 191",
" 3 193",
" 5 193"
};

long xxl(long n)
{
 if(n<3164L)
 {
       int l=446;
       int f=44 ;
       int g=268;//shud be 446+44/2=245 ale po moim trupie


      ontop: if(small[g]==n)return n;

             if(g==f)
             {
                     if(small[l]==n)return n;
                     else return small[f];
             };
             if(small[g]>n) l=g;
             else           f=g;

             g=(f+l)>>1;

      goto ontop;

 }
 else
 {
  if((n&1L)==0)
             n++;
  qtab: n-=2;
     long * smpt;
     long * qupt;

     for(smpt=small,qupt=quad;*qupt++<=n;smpt++)
      if((n % *smpt)==0L) goto qtab;

        return n;
 };

}

int solve(long n)
{

if(n<8L)
{
 cout << "Impossible.";
 return 0;
}

   long a=2L,b=2L;

   if(n>200L)a=xxl(n-6L);

   n-=a;

   if(n&1L)b=3L;


   n=(n-b)>>1;

   cout << a << ' ' << b <<  CDTAB[n] ;

   return 1;
}

int main()
{

 long n;

 cin >> n;
 while(1)
 {

  solve(n);
  cin >> n;
  if(!cin.eof()) cout << endl;
  else return 0;
 }
}



/* @END_OF_SOURCE_CODE */